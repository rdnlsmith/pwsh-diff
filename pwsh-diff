#!/usr/bin/env pwsh

param (
    [Parameter(ValueFromPipeline=$true)][string[]]$input
)

$VERSION = "0.1.0"
$COLOR_REGEX = "\x1b\[[0-9;]*m"

$GRAPH_REGEX =
    "^(($COLOR_REGEX)?\|($COLOR_REGEX)?[ ])*" + # zero or more leading "|" with space
     "($COLOR_REGEX)?\*($COLOR_REGEX)?[ ]"    + # a "*" with its trailing space
    "(($COLOR_REGEX)?\|($COLOR_REGEX)?[ ])*"  + # zero or more trailing "|"
                                     "[ ]*"     # trailing whitespace for merges

class HighlightTheme {
    [string]$NormalColor
    [string]$HighlightColor
}

class LinePair {
    [string]$RemovedLine
    [string]$AddedLine
}

class Hunk {
    [string[]]$RemovedLines
    [string[]]$AddedLines
}

function New-Hunk {
    return [Hunk]@{
        RemovedLines = @()
        AddedLines = @()
    }
}

function Get-Color {
    param (
        [string]$str
    )

    if (!$str -or $str -eq "reset") {
        return "`e[0m";
    }

    # Replace named colors with numeric colors
    $color_hash = @{
        "red" = "160";
        "blue" = "21";
        "green" = "34";
        "yellow" = "226";
        "orange" = "214";
        "purple" = "98";
        "white" = "15";
        "black" = "0";
    }

    foreach ($color in $color_hash.GetEnumerator()) {
        $str = $str -Replace $color.Name, $color.Value
    }

    # Extract foreground, background, and command
    $match = Select-String -InputObject $str -Pattern "(\d+)?_?(\w+)?" `
        | Select-Object -ExpandProperty Matches `
        | Select-Object -First 1
    if ($match.Groups) {
        $fg = $match.Groups[1].Value
        $cmd = $match.Groups[2].Value
    }

    $match = Select-String -InputObject $str -Pattern "on_?(\d+)" `
        | Select-Object -ExpandProperty Matches `
        | Select-Object -First 1

    if ($match.Groups) {
        $bg = $match.Groups[1].Value
    }

    if ($cmd) {
        # Convert named commands to numeric commands
        $cmd_hash = @{
            "bold" = "1";
            "italic" = "3";
            "underline" = "4";
            "blink" = "5";
            "inverse" = "7";
        }

        foreach ($command in $cmd_hash.GetEnumerator()) {
            $cmd = $cmd -Replace $command.Name, $command.Value
        }
    }

    # Build ANSI sequence
    $seq = "";

    if ($cmd) {
        $seq += "`e[$cmd`m"
    }

    if ($fg) {
        $seq += "`e[38;5;$fg`m"
    }

    if ($bg) {
        $seq += "`e[48;5;$bg`m"
    }

    return $seq
}

# Fetch a text item from the git config
function Get-GitConfigItem {
    param (
        [string]$key
    )

    return $(git config --get "$key")
}

# Fetch a boolean item from the git config
function Get-GitConfigBoolean {
    param (
        [string]$key
    )

    $text = Get-GitConfigItem $key

    if ($text -and $text -eq "true") {
        return $true
    } else {
        return $false
    }
}

function Get-VisibleString {
    param (
        [string]$str
    )

    return $str -Replace $COLOR_REGEX, ""
}

# Count the visible width of a string, excluding any terminal color sequences.
function Measure-VisibleWidth {
    param (
        [string]$str
    )

    $str = Get-VisibleString $str
    return $str.Length
}

# Return a substring of $str, omitting $len visible characters from the
# beginning, where terminal color sequences do not count as visible.
function Get-VisibleSubString {
    param (
        [string]$str,
        [int]$len
    )

    $str = Get-VisibleString $str
    return $str.Substring($len)
}

function Split-Line {
    param (
        [string]$line
    )

    return $line.ToCharArray()
    # return Select-String -InputObject $line -Pattern "($COLOR_REGEX|.)" -AllMatches `
    #     | ForEach-Object { $_.Matches.Value }
}

function Set-LineHighlight {
    param (
        [string]$line,
        [int]$prefixEnd,
        [int]$suffixStart,
        [HighlightTheme]$theme
    )

    $reset = Get-Color "reset"

    # if ($prefixEnd -gt $suffixStart) {
    #     return -join ("$($theme.NormalColor)", $line, "$reset")
    # }

    $prefix = $line.Substring(0, $prefixEnd)
    $mid = $line.Substring($prefixEnd, $suffixStart - $prefixEnd + 1)
    $suffix = $line.Substring($suffixStart + 1)

    return -join ( `
        "$($theme.NormalColor)", "$prefix", "$reset", `
        "$($theme.HighlightColor)", "$mid", "$reset", `
        "$($theme.NormalColor)", "$suffix", "$reset")
}

function Set-LinePairHighlight {
    param (
        [LinePair]$lines,
        [HighlightTheme]$removedTheme,
        [HighlightTheme]$addedTheme
    )

    $r_line = $lines.RemovedLine
    $a_line = $lines.AddedLine

    # Every line at this point should have a leading +/-. Anything before that is part of the graph
    # drawing; strip it off to preserve coloration, and re-attach later.
    $r_graphPrefix = Select-String -InputObject $r_line -Pattern "^.*?(?=-)" `
        | Select-Object -ExpandProperty Matches `
        | Select-Object -First 1 `
        | Select-Object -ExpandProperty Value

    $a_graphPrefix = Select-String -InputObject $a_line -Pattern "^.*?(?=\+)" `
        | Select-Object -ExpandProperty Matches `
        | Select-Object -First 1 `
        | Select-Object -ExpandProperty Value

    if ($r_graphPrefix) {
        $r_graphIndent = Measure-VisibleWidth $r_graphPrefix
        $r_line = Get-VisibleSubString $r_line $r_graphIndent
    }

    if ($a_graphPrefix) {
        $a_graphIndent = Measure-VisibleWidth $a_graphPrefix
        $a_line = Get-VisibleSubString $a_line $a_graphIndent
    }

    $r_lineVis = Get-VisibleString $r_line
    $r_lineSplit = Split-Line $r_lineVis

    $a_lineVis = Get-VisibleString $a_line
    $a_lineSplit = Split-Line $a_lineVis

    # Find common prefix
    $r_prefix = 0
    $a_prefix = 0
    $plusMinusFound = $false

    while ($r_prefix -lt $r_lineSplit.Length -and $a_prefix -lt $a_lineSplit.Length) {
        $r = $r_lineSplit[$r_prefix]
        $a = $a_lineSplit[$a_prefix]

        if ($r -ceq $a) {
            $r_prefix++
            $a_prefix++
        } elseif (!$plusMinusFound -and $r -eq "-" -and $a -eq "+") {
            $r_prefix++
            $a_prefix++
            $plusMinusFound = $true
        } else {
            break
        }
    }

    # Find common suffix
    $r_suffix = $r_lineSplit.Length - 1
    $a_suffix = $a_lineSplit.Length - 1

    while ($r_suffix -ge $r_prefix -and $a_suffix -ge $a_prefix) {
        $r = $r_lineSplit[$r_suffix]
        $a = $a_lineSplit[$a_suffix]

        if ($r -ceq $a) {
            $r_suffix--
            $a_suffix--
        } else {
            break
        }
    }

    $r_lineHighlight = Set-LineHighlight $r_lineVis $r_prefix $r_suffix $removedTheme
    $a_lineHighlight = Set-LineHighlight $a_lineVis $a_prefix $a_suffix $addedTheme

    # Prepend any previously-stripped graph bits.
    if ($r_graphPrefix) {
        $r_lineHighlight = $r_graphPrefix + $r_lineHighlight
    }

    if ($a_graphPrefix) {
        $a_lineHighlight = $a_graphPrefix + $a_lineHighlight
    }

    return [LinePair]@{
        RemovedLine = $r_lineHighlight
        AddedLine = $a_lineHighlight
    }
}

function Set-HunkHighlight {
    param (
        [Hunk]$hunk,
        [HighlightTheme]$removedTheme,
        [HighlightTheme]$addedTheme
    )

    if (!$hunk.RemovedLines -or !$hunk.AddedLines) {
        return $hunk
    }

    if ($hunk.RemovedLines.Count -ne $hunk.AddedLines.Count) {
        return $hunk
    }

    $retHunk = New-Hunk

    $i = 0
    while ($i -lt $hunk.RemovedLines.Count) {
        $pair = [LinePair]@{
            RemovedLine = $hunk.RemovedLines[$i]
            AddedLine = $hunk.AddedLines[$i]
        }

        $pair = Set-LinePairHighlight $pair $removedTheme $addedTheme

        $retHunk.RemovedLines += $pair.RemovedLine
        $retHunk.AddedLines += $pair.AddedLine

        $i++
    }

    return $retHunk
}

function Write-Hunk {
    param (
        [Hunk]$hunk
    )

    foreach ($line in $hunk.RemovedLines) {
        Write-Output $line
    }

    foreach ($line in $hunk.AddedLines) {
        Write-Output $line
    }
}



$addedTheme = [HighlightTheme]@{
    NormalColor = Get-Color "39"
    HighlightColor = Get-Color "39 on_4"
}

$removedTheme = [HighlightTheme]@{
    NormalColor = Get-Color "13"
    HighlightColor = Get-Color "13 on_5"
}

$inHunk = $false
$hunk = New-Hunk

foreach ($line in $input) {
    # match a graph line that begins a commit

    $line_noGraph = $line

    $graph_prefix = Select-String -InputObject $line -Pattern $GRAPH_REGEX `
        | Select-Object -ExpandProperty Matches `
        | Select-Object -First 1 `
        | Select-Object -ExpandProperty Value

    if ($graph_prefix) {
        # We must flush before setting graph indent, since the
        # new commit may be indented differently from what we
        # queued.
        $hunk = Set-HunkHighlight $hunk $removedTheme $addedTheme
        foreach ($r_line in $hunk.RemovedLines) {
            Write-Output $r_line
        }

        foreach ($a_line in $hunk.AddedLines) {
            Write-Output $a_line
        }
        $hunk = New-Hunk

        $graph_indent = Measure-VisibleWidth $graph_prefix
    } elseif ($graph_indent) {
        if ($line.Length -lt $graph_indent) {
            $graph_indent = 0;
        } else {
            $line_noGraph = Get-VisibleSubString $line $graph_indent
        }
    }

    if (!$inHunk) {
        Write-Output $line
        $inHunk = $line_noGraph -match "^($COLOR_REGEX)*@@"
    } elseif ($line_noGraph -match "^($COLOR_REGEX)*-") {
        $hunk.RemovedLines += $line
    } elseif ($line_noGraph -match "^($COLOR_REGEX)*\+") {
        $hunk.AddedLines += $line
    } else {
        # This is the flush
        $hunk = Set-HunkHighlight $hunk $removedTheme $addedTheme
        foreach ($r_line in $hunk.RemovedLines) {
            Write-Output $r_line
        }

        foreach ($a_line in $hunk.AddedLines) {
            Write-Output $a_line
        }
        $hunk = New-Hunk
        # End of flush

        Write-Output $line
        $inHunk = $line_noGraph -match "^($COLOR_REGEX)*[\@ ]"
    }
}
